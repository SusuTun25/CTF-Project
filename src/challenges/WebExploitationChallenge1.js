import React, { useState } from 'react';
import { Form, Button, Alert } from 'react-bootstrap';
import challengeData from '../challengeData';
import ChallengeInterface from '../components/ChallengeInterface';
import { Card } from 'react-bootstrap';
const WebExploitationChallenge1 = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loggedIn, setLoggedIn] = useState(false);
  const TEST = 'REACT_SOURCE_INSPECTOR';

  const challenge = challengeData.webExploitation.find(c => c.id === 'web1');

  const handleLogin = (e) => {
    e.preventDefault();
    if (username === 'admin' && password === 'adsjfhasdhfjkdas') {
      setLoggedIn(true);
    } else {
      alert('Incorrect login');
    }
  };

  const challengeContent = (
    <Card className="mt-4">
      <Card.Body>
        <Card.Title className="text-center mb-4">Login Page</Card.Title>
        {/* Hidden flag in a comment */}
        {/* FLAG{REACT_SOURCE_INSPECTOR} */}
        {!loggedIn ? (
          <Form onSubmit={handleLogin}>
            <Form.Group className="mb-3" controlId="formUsername">
              <Form.Label>Username:</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </Form.Group>
            <Form.Group className="mb-3" controlId="formPassword">
              <Form.Label>Password:</Form.Label>
              <Form.Control
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </Form.Group>
            <div className="d-grid">
              <Button variant="primary" type="submit">
                Login
              </Button>
            </div>
          </Form>
        ) : (
          <Alert variant="success">
            <Alert.Heading>Welcome, {username}!</Alert.Heading>
            <p>Your flag is hidden in the source code.</p>
          </Alert>
        )}
        {/* Hidden flag using a hidden HTML element */}
        <p style={{ display: 'none' }}>
          {`FLAG{${TEST}}`}
        </p>
      </Card.Body>
    </Card>
  );

  return challenge ? (
    <ChallengeInterface challenge={challenge}>
      {challengeContent}
    </ChallengeInterface>
  ) : (
    <div>Challenge not found</div>
  );
};
export default WebExploitationChallenge1;