import React, { useState, useEffect } from 'react';
import { Form, Button, Alert } from 'react-bootstrap';
import challengeData from '../challengeData';
import ChallengeInterface from '../components/ChallengeInterface';
import { Card } from 'react-bootstrap';

const WebExploitationChallenge2 = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [loggedIn, setLoggedIn] = useState(false);
  const [currentPage, setCurrentPage] = useState('login.php');
  const [uploadedFile, setUploadedFile] = useState(null);
  const [showFlag, setShowFlag] = useState(false);

  const challenge = challengeData.webExploitation.find(c => c.id === 'web2');

  useEffect(() => {
    // Simulate URL change
    console.log("Current URL:", `http://phantom.ctf/${currentPage}`);
  }, [currentPage]);

  const checkCredentials = (username, password) => {
    // Vulnerable query simulation
    let query = `SELECT * FROM users WHERE username = '${username}' AND password = '${password}'`;
    console.log("Executed query:", query);

    // Check if the password contains a SELECT statement and orders by is_admin
    const lowerPassword = password.toLowerCase();
    return lowerPassword.includes('select') && 
           lowerPassword.includes('password') && 
           lowerPassword.includes('order by') && 
           lowerPassword.includes('is_admin');
  };

  const handleLogin = (e) => {
    e.preventDefault();
    if (checkCredentials(username, password)) {
      setLoggedIn(true);
      setCurrentPage('upload.php');
    } else {
      alert('Invalid credentials');
    }
  };

  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file && (file.name.endsWith('.php2') || file.name.endsWith('.php3'))) {
      setUploadedFile(file);
    } else {
      alert('Invalid file type.');
    }
  };

  const handleFileSubmission = () => {
    if (uploadedFile) {
      setShowFlag(true);
    }
  };

  const challengeContent = (
    <Card className="mt-4">
      <Card.Body>
        <Card.Title className="text-center mb-4">The Phantom's Secure Portal</Card.Title>
        {!loggedIn ? (
          <Form onSubmit={handleLogin}>
            <Form.Group className="mb-3" controlId="formUsername">
              <Form.Label>Username:</Form.Label>
              <Form.Control
                type="text"
                placeholder="Enter username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
              />
            </Form.Group>
            <Form.Group className="mb-3" controlId="formPassword">
              <Form.Label>Password:</Form.Label>
              <Form.Control
                type="password"
                placeholder="Enter Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </Form.Group>
            <div className="d-grid">
              <Button variant="primary" type="submit">
                Login
              </Button>
            </div>
          </Form>
        ) : (
          <div>
            <Alert variant="success">
              <Alert.Heading>Welcome, Admin!</Alert.Heading>
              <p>You've successfully logged in</p>
            </Alert>
            <Form.Group className="mb-3">
              <Form.Label>Upload File:</Form.Label>
              <Form.Control 
                type="file" 
                onChange={handleFileUpload}
                accept=".php2,.php3"
              />
            </Form.Group>
            <Button variant="primary" onClick={handleFileSubmission} disabled={!uploadedFile}>
              Submit File
            </Button>
            {showFlag && (
              <Alert variant="success" className="mt-3">
                Congratulations! You've successfully exploited both vulnerabilities. The flag is: {challenge.flag}
              </Alert>
            )}
          </div>
        )}
      </Card.Body>
    </Card>
  );

  return challenge ? (
    <ChallengeInterface challenge={challenge}>
      {challengeContent}
    </ChallengeInterface>
  ) : (
    <div>Challenge not found</div>
  );
};

export default WebExploitationChallenge2;