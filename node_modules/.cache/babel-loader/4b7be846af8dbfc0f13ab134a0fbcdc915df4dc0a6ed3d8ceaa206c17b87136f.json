{"ast":null,"code":"var _jsxFileName = \"/Users/susutun/Desktop/CTF /src/challenges/CryptographyChallenge2.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Card, Form, Button, Alert } from 'react-bootstrap';\nimport ChallengeInterface from '../components/ChallengeInterface';\nimport challengeData from '../challengeData';\n\n// Advanced encoding function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst encodeMessage = message => {\n  // Step 1: Convert to binary and reverse bits\n  let binary = message.split('').map(char => {\n    let bin = char.charCodeAt(0).toString(2).padStart(8, '0');\n    return bin.split('').reverse().join('');\n  }).join('');\n\n  // Step 2: XOR with a key\n  const key = '10101010';\n  binary = binary.split('').map((bit, index) => bit ^ key[index % key.length]).join('');\n\n  // Step 3: Convert to a copyable format\n  // Use '.' for space (0) and '_' for tab (1)\n  return binary.split('').map(bit => bit === '0' ? '.' : '_').join('');\n};\nconst CryptographyChallenge2 = () => {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [message, setMessage] = useState('');\n  const challenge = challengeData.cryptography.find(c => c.id === 'crypto2');\n\n  // The secret message to be encoded\n  const secretMessage = \"PHANTOM COLLECTIVE PLANS TO HACK QUANTUM COMPUTER\";\n  const encodedMessage = encodeMessage(secretMessage);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (userInput.toUpperCase() === secretMessage) {\n      setMessage('Correct! You have successfully decoded the message. The flag is: ' + challenge.flag);\n    } else {\n      setMessage('Incorrect. Try again!');\n    }\n  };\n  const challengeContent = /*#__PURE__*/_jsxDEV(Card, {\n    className: \"mt-4\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: challenge.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n        children: challenge.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"info\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Hint:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), \" \", challenge.hint]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Encoded Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            rows: 5,\n            readOnly: true,\n            value: encodedMessage,\n            style: {\n              fontFamily: 'monospace'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Text, {\n          className: \"text-muted mb-3\",\n          children: \"In the encoded message above, '.' represents a space and '_' represents a tab.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Your Decoded Message:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            value: userInput,\n            onChange: e => setUserInput(e.target.value),\n            placeholder: \"Enter your decoded message here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(Alert, {\n        variant: message.includes('Correct') ? 'success' : 'danger',\n        className: \"mt-3\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ChallengeInterface, {\n    challenge: challenge,\n    children: challengeContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(CryptographyChallenge2, \"eUnAp9Bk3/7dWctXuSQzCETso3s=\");\n_c = CryptographyChallenge2;\nexport default CryptographyChallenge2;\nvar _c;\n$RefreshReg$(_c, \"CryptographyChallenge2\");","map":{"version":3,"names":["React","useState","Card","Form","Button","Alert","ChallengeInterface","challengeData","jsxDEV","_jsxDEV","encodeMessage","message","binary","split","map","char","bin","charCodeAt","toString","padStart","reverse","join","key","bit","index","length","CryptographyChallenge2","_s","userInput","setUserInput","setMessage","challenge","cryptography","find","c","id","secretMessage","encodedMessage","handleSubmit","e","preventDefault","toUpperCase","flag","challengeContent","className","children","Body","Title","title","fileName","_jsxFileName","lineNumber","columnNumber","Text","description","variant","hint","onSubmit","Group","Label","Control","as","rows","readOnly","value","style","fontFamily","type","onChange","target","placeholder","includes","_c","$RefreshReg$"],"sources":["/Users/susutun/Desktop/CTF /src/challenges/CryptographyChallenge2.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Card, Form, Button, Alert } from 'react-bootstrap';\nimport ChallengeInterface from '../components/ChallengeInterface';\nimport challengeData from '../challengeData';\n\n// Advanced encoding function\nconst encodeMessage = (message) => {\n  // Step 1: Convert to binary and reverse bits\n  let binary = message.split('').map(char => {\n    let bin = char.charCodeAt(0).toString(2).padStart(8, '0');\n    return bin.split('').reverse().join('');\n  }).join('');\n\n  // Step 2: XOR with a key\n  const key = '10101010';\n  binary = binary.split('').map((bit, index) => \n    bit ^ key[index % key.length]\n  ).join('');\n\n  // Step 3: Convert to a copyable format\n  // Use '.' for space (0) and '_' for tab (1)\n  return binary.split('').map(bit => bit === '0' ? '.' : '_').join('');\n};\n\nconst CryptographyChallenge2 = () => {\n  const [userInput, setUserInput] = useState('');\n  const [message, setMessage] = useState('');\n  const challenge = challengeData.cryptography.find(c => c.id === 'crypto2');\n\n  // The secret message to be encoded\n  const secretMessage = \"PHANTOM COLLECTIVE PLANS TO HACK QUANTUM COMPUTER\";\n  const encodedMessage = encodeMessage(secretMessage);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (userInput.toUpperCase() === secretMessage) {\n      setMessage('Correct! You have successfully decoded the message. The flag is: ' + challenge.flag);\n    } else {\n      setMessage('Incorrect. Try again!');\n    }\n  };\n\n  const challengeContent = (\n    <Card className=\"mt-4\">\n      <Card.Body>\n        <Card.Title>{challenge.title}</Card.Title>\n        <Card.Text>{challenge.description}</Card.Text>\n        <Alert variant=\"info\">\n          <strong>Hint:</strong> {challenge.hint}\n        </Alert>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Encoded Message:</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows={5}\n              readOnly\n              value={encodedMessage}\n              style={{ fontFamily: 'monospace' }}\n            />\n          </Form.Group>\n          <Form.Text className=\"text-muted mb-3\">\n            In the encoded message above, '.' represents a space and '_' represents a tab.\n          </Form.Text>\n          <Form.Group className=\"mb-3\">\n            <Form.Label>Your Decoded Message:</Form.Label>\n            <Form.Control \n              type=\"text\" \n              value={userInput}\n              onChange={(e) => setUserInput(e.target.value)}\n              placeholder=\"Enter your decoded message here\"\n            />\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </Form>\n        {message && (\n          <Alert variant={message.includes('Correct') ? 'success' : 'danger'} className=\"mt-3\">\n            {message}\n          </Alert>\n        )}\n      </Card.Body>\n    </Card>\n  );\n\n  return (\n    <ChallengeInterface challenge={challenge}>\n      {challengeContent}\n    </ChallengeInterface>\n  );\n};\n\nexport default CryptographyChallenge2;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}