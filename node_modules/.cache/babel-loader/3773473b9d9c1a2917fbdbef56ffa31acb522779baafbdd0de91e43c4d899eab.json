{"ast":null,"code":"var _jsxFileName = \"/Users/susutun/Desktop/CTF /src/challenges/ReverseEngineeringChallenge1.js\";\nimport challengeData from '../challengeData';\nimport ChallengeInterface from '../components/ChallengeInterface';\nimport { Card, Container } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReverseEngineeringChallenge1 = () => {\n  const challenge = challengeData.reverseEngineering.find(c => c.id === 'rev1');\n  const challengeContent = /*#__PURE__*/_jsxDEV(Card, {\n    className: \"mt-4\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        className: \"text-center mb-4\",\n        children: \"Phantom's Recruit Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your task is to reverse engineer the provided binary and find the hidden flag within it. Use your reverse engineering skills to analyze the program's behavior and structure.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          href: \"Backend/phantom_test.zip\",\n          download: true,\n          children: \"Download Challenge Binary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n  return challenge ? /*#__PURE__*/_jsxDEV(ChallengeInterface, {\n    challenge: challenge,\n    children: challengeContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Challenge not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_c = ReverseEngineeringChallenge1;\nexport default ReverseEngineeringChallenge1;\nvar _c;\n$RefreshReg$(_c, \"ReverseEngineeringChallenge1\");","map":{"version":3,"names":["challengeData","ChallengeInterface","Card","Container","Button","jsxDEV","_jsxDEV","ReverseEngineeringChallenge1","challenge","reverseEngineering","find","c","id","challengeContent","className","children","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","variant","href","download","_c","$RefreshReg$"],"sources":["/Users/susutun/Desktop/CTF /src/challenges/ReverseEngineeringChallenge1.js"],"sourcesContent":["import challengeData from '../challengeData';\nimport ChallengeInterface from '../components/ChallengeInterface';\nimport { Card, Container} from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\nconst ReverseEngineeringChallenge1 = () => {\n\n    const challenge = challengeData.reverseEngineering.find(c => c.id === 'rev1');\n\n    const challengeContent = (\n        <Card className=\"mt-4\">\n          <Card.Body>\n            <Card.Title className=\"text-center mb-4\">Phantom's Recruit Test</Card.Title>\n            <p>\n              Your task is to reverse engineer the provided binary and find the hidden flag within it. \n              Use your reverse engineering skills to analyze the program's behavior and structure.\n            </p>\n            <div className=\"mt-3\">\n              <Button variant=\"primary\" href=\"Backend/phantom_test.zip\" download>\n                Download Challenge Binary\n              </Button>\n            </div>\n          </Card.Body>\n        </Card>\n      );\n    \n\n    return challenge ? (\n        <ChallengeInterface challenge={challenge}>\n            {challengeContent}\n        </ChallengeInterface>\n    ) : (\n        <div>Challenge not found</div>\n    );\n};\n\nexport default ReverseEngineeringChallenge1;\n"],"mappings":";AAAA,OAAOA,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,kBAAkB,MAAM,kCAAkC;AACjE,SAASC,IAAI,EAAEC,SAAS,QAAO,iBAAiB;AAChD,SAASC,MAAM,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACzC,MAAMC,4BAA4B,GAAGA,CAAA,KAAM;EAEvC,MAAMC,SAAS,GAAGR,aAAa,CAACS,kBAAkB,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAK,MAAM,CAAC;EAE7E,MAAMC,gBAAgB,gBAClBP,OAAA,CAACJ,IAAI;IAACY,SAAS,EAAC,MAAM;IAAAC,QAAA,eACpBT,OAAA,CAACJ,IAAI,CAACc,IAAI;MAAAD,QAAA,gBACRT,OAAA,CAACJ,IAAI,CAACe,KAAK;QAACH,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAAC;MAAsB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAC5Ef,OAAA;QAAAS,QAAA,EAAG;MAGH;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJf,OAAA;QAAKQ,SAAS,EAAC,MAAM;QAAAC,QAAA,eACnBT,OAAA,CAACF,MAAM;UAACkB,OAAO,EAAC,SAAS;UAACC,IAAI,EAAC,0BAA0B;UAACC,QAAQ;UAAAT,QAAA,EAAC;QAEnE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CACP;EAGH,OAAOb,SAAS,gBACZF,OAAA,CAACL,kBAAkB;IAACO,SAAS,EAAEA,SAAU;IAAAO,QAAA,EACpCF;EAAgB;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC,gBAErBf,OAAA;IAAAS,QAAA,EAAK;EAAmB;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAChC;AACL,CAAC;AAACI,EAAA,GA7BIlB,4BAA4B;AA+BlC,eAAeA,4BAA4B;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}