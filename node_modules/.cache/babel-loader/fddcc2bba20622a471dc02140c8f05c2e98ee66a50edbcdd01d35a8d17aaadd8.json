{"ast":null,"code":"const challengeData = {\n  \"webExploitation\": [{\n    \"id\": \"web1\",\n    \"title\": \"SQL Injection 101\",\n    \"description\": \"Can you exploit this simple login form to gain unauthorized access?\",\n    \"hint\": \"Try inputting special characters in the username field.\",\n    \"flag\": \"CTF{sql_injection_mastered}\",\n    \"component\": 'WebExploitationChallenge1',\n    \"difficulty\": \"Easy\",\n    \"points\": \"100\"\n  }, {\n    \"id\": \"web2\",\n    \"title\": \"XSS Adventure\",\n    \"description\": \"Inject a script to alert() the cookie on this page.\",\n    \"hint\": \"Look for user input that's reflected on the page without proper sanitization.\",\n    \"flag\": \"CTF{xss_master}\"\n  }],\n  \"cryptography\": [{\n    \"id\": \"crypto1\",\n    \"title\": \"Caesar's Secret\",\n    \"description\": \"Decrypt this message that was encrypted using a Caesar cipher.\",\n    \"hint\": \"The shift used is equal to the atomic number of Carbon.\",\n    \"flag\": \"CTF{hail_caesar}\"\n  }, {\n    \"id\": \"crypto2\",\n    \"title\": \"RSA Rookie\",\n    \"description\": \"Break this simple RSA encryption with small prime factors.\",\n    \"hint\": \"The primes used are both less than 100.\",\n    \"flag\": \"CTF{small_primes_big_problem}\"\n  }],\n  \"networkSecurity\": [{\n    \"id\": \"net1\",\n    \"title\": \"Packet Sniffing 101\",\n    \"description\": \"Analyze this pcap file to find the hidden flag.\",\n    \"hint\": \"Look for unencrypted HTTP traffic.\",\n    \"flag\": \"CTF{wireshark_pro}\"\n  }],\n  \"reverseEngineering\": [{\n    \"id\": \"rev1\",\n    \"title\": \"Assembly Basics\",\n    \"description\": \"Reverse engineer this simple x86 assembly code to find the flag.\",\n    \"hint\": \"Pay attention to the comparison before the jump instruction.\",\n    \"flag\": \"CTF{asm_master}\"\n  }],\n  \"binaryExploitation\": [{\n    \"id\": \"bin1\",\n    \"title\": \"Buffer Overflow 101\",\n    \"description\": \"Exploit this program's buffer to gain a shell.\",\n    \"hint\": \"The buffer is 64 bytes long. What happens if you write more?\",\n    \"flag\": \"CTF{stack_smashed}\"\n  }]\n};\nexport default challengeData;","map":{"version":3,"names":["challengeData"],"sources":["C:/Users/Wilson/CTF-Project/src/challengeData.js"],"sourcesContent":["const challengeData = {\r\n    \"webExploitation\": [\r\n      {\r\n        \"id\": \"web1\",\r\n        \"title\": \"SQL Injection 101\",\r\n        \"description\": \"Can you exploit this simple login form to gain unauthorized access?\",\r\n        \"hint\": \"Try inputting special characters in the username field.\",\r\n        \"flag\": \"CTF{sql_injection_mastered}\",\r\n        \"component\": 'WebExploitationChallenge1',\r\n        \"difficulty\": \"Easy\",\r\n        \"points\":\"100\"\r\n\r\n      },\r\n      {\r\n        \"id\": \"web2\",\r\n        \"title\": \"XSS Adventure\",\r\n        \"description\": \"Inject a script to alert() the cookie on this page.\",\r\n        \"hint\": \"Look for user input that's reflected on the page without proper sanitization.\",\r\n        \"flag\": \"CTF{xss_master}\"\r\n      }\r\n    ],\r\n    \"cryptography\": [\r\n      {\r\n        \"id\": \"crypto1\",\r\n        \"title\": \"Caesar's Secret\",\r\n        \"description\": \"Decrypt this message that was encrypted using a Caesar cipher.\",\r\n        \"hint\": \"The shift used is equal to the atomic number of Carbon.\",\r\n        \"flag\": \"CTF{hail_caesar}\"\r\n      },\r\n      {\r\n        \"id\": \"crypto2\",\r\n        \"title\": \"RSA Rookie\",\r\n        \"description\": \"Break this simple RSA encryption with small prime factors.\",\r\n        \"hint\": \"The primes used are both less than 100.\",\r\n        \"flag\": \"CTF{small_primes_big_problem}\"\r\n      }\r\n    ],\r\n    \"networkSecurity\": [\r\n      {\r\n        \"id\": \"net1\",\r\n        \"title\": \"Packet Sniffing 101\",\r\n        \"description\": \"Analyze this pcap file to find the hidden flag.\",\r\n        \"hint\": \"Look for unencrypted HTTP traffic.\",\r\n        \"flag\": \"CTF{wireshark_pro}\"\r\n      }\r\n    ],\r\n    \"reverseEngineering\": [\r\n      {\r\n        \"id\": \"rev1\",\r\n        \"title\": \"Assembly Basics\",\r\n        \"description\": \"Reverse engineer this simple x86 assembly code to find the flag.\",\r\n        \"hint\": \"Pay attention to the comparison before the jump instruction.\",\r\n        \"flag\": \"CTF{asm_master}\"\r\n      }\r\n    ],\r\n    \"binaryExploitation\": [\r\n      {\r\n        \"id\": \"bin1\",\r\n        \"title\": \"Buffer Overflow 101\",\r\n        \"description\": \"Exploit this program's buffer to gain a shell.\",\r\n        \"hint\": \"The buffer is 64 bytes long. What happens if you write more?\",\r\n        \"flag\": \"CTF{stack_smashed}\"\r\n      }\r\n    ]\r\n  };\r\n  \r\n  export default challengeData;"],"mappings":"AAAA,MAAMA,aAAa,GAAG;EAClB,iBAAiB,EAAE,CACjB;IACE,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,mBAAmB;IAC5B,aAAa,EAAE,qEAAqE;IACpF,MAAM,EAAE,yDAAyD;IACjE,MAAM,EAAE,6BAA6B;IACrC,WAAW,EAAE,2BAA2B;IACxC,YAAY,EAAE,MAAM;IACpB,QAAQ,EAAC;EAEX,CAAC,EACD;IACE,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,eAAe;IACxB,aAAa,EAAE,qDAAqD;IACpE,MAAM,EAAE,+EAA+E;IACvF,MAAM,EAAE;EACV,CAAC,CACF;EACD,cAAc,EAAE,CACd;IACE,IAAI,EAAE,SAAS;IACf,OAAO,EAAE,iBAAiB;IAC1B,aAAa,EAAE,gEAAgE;IAC/E,MAAM,EAAE,yDAAyD;IACjE,MAAM,EAAE;EACV,CAAC,EACD;IACE,IAAI,EAAE,SAAS;IACf,OAAO,EAAE,YAAY;IACrB,aAAa,EAAE,4DAA4D;IAC3E,MAAM,EAAE,yCAAyC;IACjD,MAAM,EAAE;EACV,CAAC,CACF;EACD,iBAAiB,EAAE,CACjB;IACE,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,qBAAqB;IAC9B,aAAa,EAAE,iDAAiD;IAChE,MAAM,EAAE,oCAAoC;IAC5C,MAAM,EAAE;EACV,CAAC,CACF;EACD,oBAAoB,EAAE,CACpB;IACE,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,iBAAiB;IAC1B,aAAa,EAAE,kEAAkE;IACjF,MAAM,EAAE,8DAA8D;IACtE,MAAM,EAAE;EACV,CAAC,CACF;EACD,oBAAoB,EAAE,CACpB;IACE,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,qBAAqB;IAC9B,aAAa,EAAE,gDAAgD;IAC/D,MAAM,EAAE,8DAA8D;IACtE,MAAM,EAAE;EACV,CAAC;AAEL,CAAC;AAED,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}