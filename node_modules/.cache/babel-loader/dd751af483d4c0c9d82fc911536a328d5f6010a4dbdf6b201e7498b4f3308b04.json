{"ast":null,"code":"const challengeData = {\n  \"webExploitation\": [{\n    \"id\": \"web1\",\n    \"title\": \"Log Me In\",\n    \"description\": \"Can you exploit this simple login form to gain unauthorized access?\",\n    \"hint\": \"Try looking at the source.\",\n    \"flag\": \"CTF{sql_injection_mastered}\",\n    \"component\": 'WebExploitationChallenge1',\n    \"difficulty\": \"Easy\",\n    \"points\": 100\n  }],\n  \"cryptography\": [{\n    \"id\": \"crypto1\",\n    \"title\": \"Khoor's Secret\",\n    \"description\": \"Decrypt this message that was encrypted using a Caesar cipher.\",\n    \"hint\": \"The shift used is equal to the atomic number of Carbon.\",\n    \"flag\": \"FLAG{CaesarCipher}\",\n    \"difficulty\": \"Easy\",\n    \"points\": 100\n  }],\n  \"networkSecurity\": [{\n    \"id\": \"net1\",\n    \"title\": \"Intercept the Secret\",\n    \"description\": \"Analyze this pcap file to find the hidden flag.\",\n    \"hint\": \"Look for unencrypted HTTP traffic.\",\n    \"flag\": \"FLAG{NetworkTrafficSniffer}\",\n    \"difficulty\": \"Easy\",\n    \"points\": 100\n  }],\n  \"reverseEngineering\": [{\n    \"id\": \"rev1\",\n    \"title\": \"Assembly Basics\",\n    \"description\": \"We have encrypted a secret message and hidden it in an encoded string. Your task is to reverse-engineer the encoding to discover the flag.\",\n    \"hint\": \"The flag is in the format `FLAG{message}`, and the encoding is a common reversible technique. Start by decoding the base64 string and look for clues!\",\n    \"flag\": \"FLAG{ReverseCTFChallenge}\",\n    \"difficulty\": \"Easy\",\n    \"points\": 100\n  }],\n  \"binaryExploitation\": [{\n    \"id\": \"bin1\",\n    \"title\": \"Buffer Overflow 101\",\n    \"description\": \"You’ve discovered a vulnerable program that seems to lack proper input validation.\",\n    \"hint\": \"The flag is in the format `FLAG{message}`, and the encoding is a common reversible technique. Start by decoding the base64 string and look for clues!\",\n    \"flag\": \"FLAG{BufferOverflowMaster}\",\n    \"difficulty\": \"Easy\",\n    \"points\": 100\n  }]\n};\nexport default challengeData;","map":{"version":3,"names":["challengeData"],"sources":["D:/School/SC4013 - Application Security/CTF-Project/src/challengeData.js"],"sourcesContent":["const challengeData = {\r\n    \"webExploitation\": [\r\n      {\r\n        \"id\": \"web1\",\r\n        \"title\": \"Log Me In\",\r\n        \"description\": \"Can you exploit this simple login form to gain unauthorized access?\",\r\n        \"hint\": \"Try looking at the source.\",\r\n        \"flag\": \"CTF{sql_injection_mastered}\",\r\n        \"component\": 'WebExploitationChallenge1',\r\n        \"difficulty\": \"Easy\",\r\n        \"points\":100\r\n      },\r\n     \r\n    ],\r\n    \"cryptography\": [\r\n      {\r\n        \"id\": \"crypto1\",\r\n        \"title\": \"Khoor's Secret\",\r\n        \"description\": \"Decrypt this message that was encrypted using a Caesar cipher.\",\r\n        \"hint\": \"The shift used is equal to the atomic number of Carbon.\",\r\n        \"flag\": \"FLAG{CaesarCipher}\",\r\n        \"difficulty\": \"Easy\",\r\n        \"points\":100\r\n      },\r\n     \r\n    ],\r\n    \"networkSecurity\": [\r\n      {\r\n        \"id\": \"net1\",\r\n        \"title\": \"Intercept the Secret\",\r\n        \"description\": \"Analyze this pcap file to find the hidden flag.\",\r\n        \"hint\": \"Look for unencrypted HTTP traffic.\",\r\n        \"flag\": \"FLAG{NetworkTrafficSniffer}\",\r\n        \"difficulty\": \"Easy\",\r\n        \"points\":100\r\n      }\r\n    ],\r\n    \"reverseEngineering\": [\r\n      {\r\n        \"id\": \"rev1\",\r\n        \"title\": \"Assembly Basics\",\r\n        \"description\": \"We have encrypted a secret message and hidden it in an encoded string. Your task is to reverse-engineer the encoding to discover the flag.\",\r\n        \"hint\": \"The flag is in the format `FLAG{message}`, and the encoding is a common reversible technique. Start by decoding the base64 string and look for clues!\",\r\n        \"flag\": \"FLAG{ReverseCTFChallenge}\",\r\n        \"difficulty\": \"Easy\",\r\n        \"points\":100\r\n      }\r\n    ],\r\n    \"binaryExploitation\": [\r\n      {\r\n        \"id\": \"bin1\",\r\n        \"title\": \"Buffer Overflow 101\",\r\n        \"description\": \"You’ve discovered a vulnerable program that seems to lack proper input validation.\",\r\n        \"hint\": \"The flag is in the format `FLAG{message}`, and the encoding is a common reversible technique. Start by decoding the base64 string and look for clues!\",\r\n        \"flag\": \"FLAG{BufferOverflowMaster}\",\r\n        \"difficulty\": \"Easy\",\r\n        \"points\":100\r\n      }\r\n    ]\r\n  };\r\n  \r\n  export default challengeData;"],"mappings":"AAAA,MAAMA,aAAa,GAAG;EAClB,iBAAiB,EAAE,CACjB;IACE,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,WAAW;IACpB,aAAa,EAAE,qEAAqE;IACpF,MAAM,EAAE,4BAA4B;IACpC,MAAM,EAAE,6BAA6B;IACrC,WAAW,EAAE,2BAA2B;IACxC,YAAY,EAAE,MAAM;IACpB,QAAQ,EAAC;EACX,CAAC,CAEF;EACD,cAAc,EAAE,CACd;IACE,IAAI,EAAE,SAAS;IACf,OAAO,EAAE,gBAAgB;IACzB,aAAa,EAAE,gEAAgE;IAC/E,MAAM,EAAE,yDAAyD;IACjE,MAAM,EAAE,oBAAoB;IAC5B,YAAY,EAAE,MAAM;IACpB,QAAQ,EAAC;EACX,CAAC,CAEF;EACD,iBAAiB,EAAE,CACjB;IACE,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,sBAAsB;IAC/B,aAAa,EAAE,iDAAiD;IAChE,MAAM,EAAE,oCAAoC;IAC5C,MAAM,EAAE,6BAA6B;IACrC,YAAY,EAAE,MAAM;IACpB,QAAQ,EAAC;EACX,CAAC,CACF;EACD,oBAAoB,EAAE,CACpB;IACE,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,iBAAiB;IAC1B,aAAa,EAAE,4IAA4I;IAC3J,MAAM,EAAE,uJAAuJ;IAC/J,MAAM,EAAE,2BAA2B;IACnC,YAAY,EAAE,MAAM;IACpB,QAAQ,EAAC;EACX,CAAC,CACF;EACD,oBAAoB,EAAE,CACpB;IACE,IAAI,EAAE,MAAM;IACZ,OAAO,EAAE,qBAAqB;IAC9B,aAAa,EAAE,oFAAoF;IACnG,MAAM,EAAE,uJAAuJ;IAC/J,MAAM,EAAE,4BAA4B;IACpC,YAAY,EAAE,MAAM;IACpB,QAAQ,EAAC;EACX,CAAC;AAEL,CAAC;AAED,eAAeA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}